# here we make some basic iControlRest calls to setup network elements on BIG-IP
# A more polished implementation might include custom ansible modules for these
# steps.  iCR is used directly for clarity.
---

# ---------------------------------
# Configure basic network services that are the same across all devices
# ---------------------------------

- name: Set aws access and secret keys
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ inventory_hostname }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_pass }}
    payload='{"awsAccessKey":"5678", "awsSecretKey":"5678"}'
    collection_path='mgmt/tm/sys/global-settings'

- name: Disable dhcp
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ inventory_hostname }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_pass }}
    payload='{ "value":"disable" }'
    collection_path='mgmt/tm/sys/db/dhclient.mgmt'

#dont need this in Amazon, we get through DHCP
# - name: Configure DNS servers
#   delegate_to: localhost
#   bigip_config:
#     state=present
#     host={{ inventory_hostname }}
#     user={{ bigip_rest_user }}
#     password={{ bigip_rest_pass }}
#     payload='{"nameServers":["4.2.2.1"]}'
#     collection_path='mgmt/tm/sys/dns'

# We need NTP, we don't get this through Amazon
#TODO: take in an array for pool members
# pool members are the same for each device if they are in the same region
- name: Configure NTP servers
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ inventory_hostname }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_pass }}
    payload='{"servers":["0.pool.ntp.org","1.pool.ntp.org"],"timezone":"America/Los_Angeles"}'
    collection_path='mgmt/tm/sys/ntp'

# We don't really need this - Amazon provides this functionality with their ACLs
# - name: Set SSH mgmt access
#   delegate_to: localhost
#   bigip_config:
#     state=present
#     host={{ inventory_hostname }}
#     user={{ bigip_rest_user }}
#     password={{ bigip_rest_pass }}
#     payload='{"allow":["ALL"]}'
    # collection_path='mgmt/tm/sys/sshd'

# We don't really need this - Amazon provides this functionality with their ACLs
# - name: Set HTTP mgmt access
#   delegate_to: localhost
#   bigip_config:
#     state=present
#     host={{ inventory_hostname }}
#     user={{ bigip_rest_user }}
#     password={{ bigip_rest_pass }}
#     payload='{"allow":["ALL"]}'
#     collection_path='mgmt/tm/sys/httpd'

# TODO: Do we want to demo something with SNMP as part of topology?
- name: Set SNMP access
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ inventory_hostname }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_pass }}
    payload='{"allowedAddresses":[ "{{ vpc_cidr }}" ]}'
    collection_path='mgmt/tm/sys/snmp'

# TODO: define log server ip somewhere (172.16.14.100)
- name: Configure syslog
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ inventory_hostname }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_pass }}
    payload='{"include":"destination loghost { udp( 172.16.14.100 port (514));};"}'
    collection_path='mgmt/tm/sys/syslog'

# ------------------------------------------------------------
# Configure network settings which are specific to this device 
# ------------------------------------------------------------

- name: Add internal vlan
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ inventory_hostname }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_pass }}
    payload='{"name":"private", "interfaces":"1.1"}'
    collection_path='mgmt/tm/net/vlan'
    resource_key="name"

- name: Add external vlan
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ inventory_hostname }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_pass }}
    payload='{"name":"public", "interfaces":"1.2"}'
    collection_path='mgmt/tm/net/vlan'
    resource_key="name"

# TODO: add 1 secondary private IP per virtual
#  we'll likely have two virtuals per big

# - name: Add a default gateway pool
#   delegate_to: localhost
#   bigip_config:
#     state=present
#     host={{ inventory_hostname }}
#     user={{ bigip_rest_user }}
#     password={{ bigip_rest_pass }}
#     payload='{"name":"default_gateway_pool", "members":[{"name":"172.16.2.1:0","address":"172.16.2.1"}, {"name":"172.16.12.1:0","address":"172.16.12.1"}], "monitor":"gateway_icmp"}'
#     collection_path='mgmt/tm/ltm/pool'
#     resource_key="name"

# - name: Add pool member default gateway pool
#   delegate_to: localhost
#   bigip_config:
#     state=present
#     host={{ inventory_hostname }}
#     user={{ bigip_rest_user }}
#     password={{ bigip_rest_pass }}
#     payload='{ "name":"pool_member_gateway_pool", "members":[{"name":"172.16.3.1:0","address":"172.16.3.1"}, {"name":"172.16.13.1:0","address":"172.16.13.1"}], "monitor":"gateway_icmp" }'
#     collection_path='mgmt/tm/ltm/pool'
#     resource_key="name"



# We don't physically need this because the default gateway (which is the amazon router)
# will know how to route traffic to the pool members
# To provide an "airgap"  we can include these routes
# - name: Setting Pool Member Routes (using pool member gateway_pool)... - member 1 
#   delegate_to: localhost
#   bigip_config:
#     state=present
#     host={{ inventory_hostname }}
#     user={{ bigip_rest_user }}
#     password={{ bigip_rest_pass }}
#     payload='{ "name":"AZ1_pool_member_network", "network":"172.16.4.0/24", "pool":"/Common/pool_member_gateway_pool" }'
#     collection_path='/mgmt/tm/net/route'
#     resource_key="name"

# - name: Setting Pool Member Routes (using pool member gateway_pool)... - member 2
#   delegate_to: localhost
#   bigip_config:
#     state=present
#     host={{ inventory_hostname }}
#     user={{ bigip_rest_user }}
#     password={{ bigip_rest_pass }}
#     payload='{ "name":"AZ2_pool_member_network", "network":"172.16.14.0/24", "pool":"/Common/pool_member_gateway_pool" }'
#     collection_path='/mgmt/tm/net/route'
#     resource_key="name"

