---

# ---------------------------------
# Configure network, LTM, and ASM settings which are specific to this device 
# ---------------------------------

# THe address we give for local only self-ip is provided by Amazon (InternalInterfacePrivateIp)
- name: Add internal selfip
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ inventory_hostname }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_pass }}
    payload='{"name":"private", "address":"{{ InternalInterfacePrivateIp }}/24", "vlan":"private", "trafficGroup":"traffic-group-local-only"}'
    collection_path='mgmt/tm/net/self'
    resource_key="name"

# THe address we give for external, local-only self-ip is provided by Amazon (ExternalInterfacePrivateIp)
- name: Add external selfip
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ inventory_hostname }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_pass }}
    payload='{"name":"public", "address":"{{ ExternalInterfacePrivateIp }}/24", "vlan":"public"}'
    collection_path='mgmt/tm/net/self'
    resource_key="name"

# for each bigip this route will be different
# will be the first IP on the subnet network, i.e. 172.16.12.1 and 172.16.22.1
# TODO: here we replace the '0' with a '1' from the variable 'public_cidr'. 
#  In Amazon, the default gateway is the first IP in subnet.  THis might not 
#  be true in other environments, in which case we'll want a more robust solution. 
- name: Set default route using the default_gateway_pool
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ inventory_hostname }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_pass }}
    payload='{"name":"default_route", "network":"default", "gw":"{{ [ExternalInterfacePrivateIp[0:9],1]|join('.') }}" }'
    collection_path='/mgmt/tm/net/route'
    resource_key="name"


# TODO: add 1 secondary private IP per virtual
#  we'll likely have two virtuals per big


