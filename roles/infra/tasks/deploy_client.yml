---
- name: Determining state of deployed cloudformation stacks
  shell: "python {{ install_path }}/bin/get_cfn_stack_state.py {{ region }} {{ env_name }}-{{ inventory_hostname }}"
  register: initial_cfn_state

- name: Teardown previous stack if necessary
  cloudformation:
    stack_name="{{ env_name }}-{{ inventory_hostname }}"
    state=absent
    region="{{ region }}"
    template={{ install_path }}/roles/infra/files/client.json
  when: "'{{ initial_cfn_state['stdout'] }}' == 'ROLLBACK_COMPLETE'"

# We could have used the ec2 module here from ansible. It works well when 
#  deploying "generic" compute resources but we'll use cloudformation
#  instead for consistency. 
- name: Launching client hosts
  action: cloudformation
    stack_name="{{ env_name }}-{{ inventory_hostname }}"
    state=present
    region="{{ region }}"
    template={{ install_path }}/roles/infra/files/client.json
  args:
    tags:
      envName: "{{ env_name }}"
      host: "{{ inventory_hostname }}"
      instanceType: "ClientHost"
    template_parameters:
      envName: "{{ env_name }}"
      vpc: "{{ vpc_id }}"
      clientSubnet: "{{ public_subnet }}"
      instanceType: "{{ clienthost_instance_type }}"
      keyName: "{{ key_name }}"
  register: clienthost_deploy_results

- name: Persisting variable data
  copy: content="{{ clienthost_deploy_results | to_yaml }}" dest=~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}.yml

- copy: content="{{ clienthost_deploy_results['stack_outputs'] | to_json }}" dest=~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}.json
