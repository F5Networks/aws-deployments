- name: Deploying/updating Webserver Pool
  delegate_to: localhost
  bigip_config:
      state=present
      host={{ ansible_ssh_host }}
      user={{ bigip_rest_user }}
      password={{ bigip_rest_password }}
      payload_file="~/vars/f5aws/env/{{ env_name }}/{{ vip_id }}_pool_from_containers.json"
      collection_path="mgmt/tm/ltm/pool"
      resource_key="name"

- name: Build REST payload for the analytics server pool
  template: src="{{ install_path }}/roles/bigip_app1/templates/analytics_pool_payload.json.j2" dest="{{ env_path }}/{{ env_name }}/analytics_pool_payload-{{ vip_id }}.json"
  delegate_to: localhost
  when: deploy_analytics is defined and deploy_analytics == "true"

- name: Build REST payload for the asm loggging profile to remote analytics server
  template: src="{{ install_path }}/roles/bigip_app1/templates/asm_logging_profile_payload.json.j2" dest="{{ env_path }}/{{ env_name }}/asm_logging_profile_payload-{{ vip_id }}.json"
  delegate_to: localhost
  when: deploy_analytics is defined and deploy_analytics == "true"

- name: Deploying/updating High Speed Logging pool to send to Analytics Server
  delegate_to: localhost
  bigip_config:
      state=present
      host={{ ansible_ssh_host }}
      user={{ bigip_rest_user }}
      password={{ bigip_rest_password }}
      collection_path="mgmt/tm/ltm/pool"
      payload_file="{{ env_path }}/{{ env_name }}/analytics_pool_payload-{{ vip_id }}.json"
      resource_key="name"
  when: deploy_analytics is not defined or deploy_analytics == "false"

- name: Deploying/updating High Speed Logging pool to send to Analytics Server
  delegate_to: localhost
  bigip_config:
      state=present
      host={{ ansible_ssh_host }}
      user={{ bigip_rest_user }}
      password={{ bigip_rest_password }}
      collection_path="mgmt/tm/ltm/pool"
      payload_file="{{ env_path }}/{{ env_name }}/analytics_pool_payload-{{ vip_id }}.json"
      resource_key="name"
  when: deploy_analytics is defined and deploy_analytics == "true"

# - name: Deploying/updating ASM Logging Profile to send to Remote Analytics Server
#   delegate_to: localhost
#   bigip_config:
#       state=present
#       host={{ ansible_ssh_host }}
#       user={{ bigip_rest_user }}
#       password={{ bigip_rest_password }}
#       collection_path="mgmt/tm/security/log/profile"
#       payload_file="{{ env_path }}/{{ env_name }}/asm_logging_profile_payload-{{ vip_id }}.json"
#       resource_key="name"
#   when: deploy_analytics is not defined or deploy_analytics == "false"
# 
# - name: Deploying/updating ASM Logging Profile to send to Remote Analytics Server
#   delegate_to: localhost
#   bigip_config:
#       state=present
#       host={{ ansible_ssh_host }}
#       user={{ bigip_rest_user }}
#       password={{ bigip_rest_password }}
#       collection_path="mgmt/tm/security/log/profile"
#       payload_file="{{ env_path }}/{{ env_name }}/asm_logging_profile_payload-{{ vip_id }}.json"
#       resource_key="name"
#   when: deploy_analytics is defined and deploy_analytics == "true"
# 

##### UPLOAD DATAGROUP #####
# TODO:
# "Setting SSL Profiles"
# "Setting Remote Logging Profiles"

- name: Deploying/updating Analytics Profile
  delegate_to: localhost
  bigip_config:
      state=present
      host={{ ansible_ssh_host }}
      user={{ bigip_rest_user }}
      password={{ bigip_rest_password }}
      collection_path="mgmt/tm/ltm/profile/analytics"
      resource_key="name"
      payload='{"name":"{{ analytics_profile_name }}","capturedTrafficExternalLogging":"disabled","capturedTrafficInternalLogging":"disabled","collectGeo":"enabled","collectIp":"enabled","collectMaxTpsAndThroughput":"enabled","collectMethods":"enabled","collectPageLoadTime":"enabled","collectResponseCodes":"enabled","collectSubnets":"enabled","collectUrl":"enabled","collectUserAgent":"enabled","collectUserSessions":"enabled","collectedStatsExternalLogging":"disabled","collectedStatsInternalLogging":"enabled","defaultsFrom":"/Common/analytics","notificationByEmail":"disabled","notificationBySnmp":"disabled","notificationBySyslog":"disabled","partition":"Common","publishIruleStatistics":"disabled","sampling":"enabled","sessionCookieSecurity":"ssl-only","sessionTimeoutMinutes":"5"}'

- name: Uploading Datagroup ... background for sorry page
  delegate_to: localhost
  bigip_config:
      state=present
      host={{ ansible_ssh_host }}
      user={{ bigip_rest_user }}
      password={{ bigip_rest_password }}
      collection_path="mgmt/tm/ltm/data-group/internal"
      resource_key="name"
      payload='{"name":"background_images","type":"string","records":[{"name":"{{image_background}}"}]}'

- name: Uploading Datagroup ... image for sorry page
  delegate_to: localhost
  bigip_config:
      state=present
      host={{ ansible_ssh_host }}
      user={{ bigip_rest_user }}
      password={{ bigip_rest_password }}
      collection_path="mgmt/tm/ltm/data-group/internal"
      resource_key="name"
      payload='{"name":"sorry_images","type":"string","records":[{"name":"{{image_sorry}}"}]}'

- name: Uploading iRules ... sorry_page_rule
  delegate_to: localhost
  bigip_config:
      state=present
      host={{ ansible_ssh_host }}
      user={{ bigip_rest_user }}
      password={{ bigip_rest_password }}
      collection_path='mgmt/tm/ltm/rule'
      resource_key="name"
      payload='{"name":"irule_sorry_page","apiAnonymous":"{{irule_sorry_page|replace("\\","\\\\")|replace("\"","\\\"")|replace("\n","\\n")}}"}'

- name: Uploading iRules ... demo_analytics_rule
  delegate_to: localhost
  bigip_config:
      state=present
      host={{ ansible_ssh_host }}
      user={{ bigip_rest_user }}
      password={{ bigip_rest_password }}
      collection_path="mgmt/tm/ltm/rule"
      resource_key="name"
      payload='{"name":"irule_demo_analytics","apiAnonymous":"{{irule_demo_analytics|replace("\\","\\\\")|replace("\"","\\\"")|replace("\n","\\n")}}"}'

# If deploying WAF with f5_http_backport_iapp, we need
# to upload the LTM and ASM policies 
- include: provision_waf_depends.yml
  when: deployment_type == "lb_and_waf"

# Generate the iApp we will deploy from a template 
- name: Modify iApp to use VipAddress
  template: src="{{ install_path }}/roles/bigip_app1/templates/iapp_f5_http_backport_service.json.j2" dest="{{ env_path }}/{{ env_name }}/iapp_f5_http_backport_service-{{ vip_id }}.json"
  delegate_to: localhost

- name: Deploy the iApp template, since we are not using a default iApp on box
  delegate_to: localhost
  bigip_config:
      state=present
      host={{ ansible_ssh_host }}
      user={{ bigip_rest_user }}
      password={{ bigip_rest_password }}
      collection_path="mgmt/tm/sys/application/template"
      payload_file="{{ install_path }}/roles/bigip_app1/files/iapp_f5_http_backport_template.json"
      resource_key="name"

- name: Deploy the iApp service
  delegate_to: localhost
  bigip_config:
      state=present
      host={{ ansible_ssh_host }}
      user={{ bigip_rest_user }}
      password={{ bigip_rest_password }}
      collection_path="mgmt/tm/sys/application/service"
      payload_file="{{ env_path }}/{{ env_name }}/iapp_f5_http_backport_service-{{ vip_id }}.json"
      resource_key="name"
