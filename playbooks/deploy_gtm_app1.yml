---
# Dynamically populate groups from persisted results from previous playbooks.
- hosts: 
   localhost
  gather_facts: no
  tasks:

    - shell: "cat ~/vars/f5aws/env/{{ env_name }}/{{ item }}.json"
      register: output
      with_items: groups['gtm-managers']
      delegate_to: localhost

    - add_host: group=gtms
        name="{{ item.stdout | from_json | attr('get')('ManagementInterfacePublicIp') }}" 
        ManagementInterfacePublicIp="{{ item.stdout | from_json | attr('get')('ManagementInterfacePublicIp') }}"
        ManagementInterfacePrivateIp="{{ item.stdout | from_json | attr('get')('ManagementInterfacePrivateIp') }}"
        ExternalInterfacePrivateIp="{{ item.stdout | from_json | attr('get')('ExternalInterfacePrivateIp') }}"
        ExternalInterfacePublicIp="{{ item.stdout | from_json | attr('get')('ExternalInterfacePublicIp') }}"
        RegKey="{{ item.stdout | from_json | attr('get')('RegKey') }}"
        VipAddress="{{ item.stdout | from_json | attr('get')('Vip1') }}"
        region="{{region}}"
        ansible_ssh_user="admin"
      with_items: output['results']

    - shell: "cat ~/vars/f5aws/env/{{ env_name }}/{{ item }}.json"
      register: output
      with_items: groups['bigip-managers']
      delegate_to: localhost

    - add_host: name="{{ item.stdout | from_json | attr('get')('ManagementInterfacePublicIp') }}" group=bigips
        ManagementInterfacePublicIp="{{ item.stdout | from_json | attr('get')('ManagementInterfacePublicIp') }}"
        ManagementInterfacePrivateIp="{{ item.stdout | from_json | attr('get')('ManagementInterfacePrivateIp') }}"
        ExternalInterfacePublicIp="{{ item.stdout | from_json | attr('get')('ExternalInterfacePublicIp') }}"
        ExternalInterfacePrivateIp="{{ item.stdout | from_json | attr('get')('ExternalInterfacePrivateIp') }}"
        AvailabilityZone="{{ item.stdout | from_json | attr('get')('AvailabilityZone') }}"
        region="{{region}}"
        ansible_ssh_user="admin"
      with_items: output['results']

- hosts: bigips
  gather_facts: no
  tasks:

    - name: Gather EIPs for VIP1
      shell: "cat ~/vars/f5aws/env/{{ env_name }}/{{ item.1 }}-vip-Vip1.json"
      register: output
      with_indexed_items: groups['bigip-managers']
      when: inventory_hostname == groups['bigips'][item.0] 
      delegate_to: localhost

- hosts: bigips
  gather_facts: no
  tasks:
    - name: Add EIP to VIP mapping to bigip host vars
      set_fact:
          VipPrivateIp: "{{ item.stdout | from_json | attr('get')('privateIpAddress') }}"
          VipEip: "{{ item.stdout | from_json | attr('get')('eipAddress') }}"
      when: item.changed == true
      with_items: hostvars[inventory_hostname]['output']['results']

- hosts: gtms
  vars:
    vip_id: "Vip1"
  gather_facts: no
  tasks:
    - name: Setup the Virtual Servers
      delegate_to: localhost
      bigip_config:
          state=present
          host="{{ inventory_hostname }}"
          user="{{ bigip_rest_user }}"
          password="{{ bigip_rest_password }}"
          payload='{"name":"{{vip_id}}","destination":"{{hostvars[item]["VipEip"]}}:80","translationAddress":"{{hostvars[item]["VipPrivateIp"]}}"}'
          collection_path='mgmt/tm/gtm/server/~Common~ip-{{hostvars[item]["ManagementInterfacePrivateIp"]|replace(".","-")}}.ec2.internal/virtual-servers'
          resource_key="name"
      with_items: groups['bigips']
 
    - name: Setup the AZ pools
      delegate_to: localhost
      bigip_config:
          state=present
          host="{{ inventory_hostname }}"
          user="{{ bigip_rest_user }}"
          password="{{ bigip_rest_password }}"
          payload='{"name":"{{vip_id}}_pool_{{hostvars[item]["AvailabilityZone"]}}","loadBalancingMode":"round-robin","members":[{"name":"ip-{{hostvars[item]["ManagementInterfacePrivateIp"]|replace(".","-")}}.ec2.internal:{{vip_id}}"}]}'
          collection_path='mgmt/tm/gtm/pool'
          resource_key="name"
      with_items: groups['bigips']

    #Difficult to selectively grab variables for various hosts and string together in play framework. Easiest way is through a template.
    - name: Store create wideip pool string from jinja 2 template
      template: src=../roles/gtm_conf/templates/wideip_pool.cfg.j2 dest=~/vars/f5aws/env/{{ env_name }}/{{vip_id}}_wideip_pool_string.json
      delegate_to: localhost

    - shell: "cat ~/vars/f5aws/env/{{ env_name }}/{{vip_id}}_wideip_pool_string.json"
      register: wideip_pool_string
      delegate_to: localhost

    - name: Setup the Wideip
      delegate_to: localhost
      bigip_config:
          state=present
          host="{{ inventory_hostname }}"
          user="{{ bigip_rest_user }}"
          password="{{ bigip_rest_password }}"
          payload='{"name":"{{vip_id}}.example.com","poolLbMode":"topology","ipv6NoErrorResponse":"enabled","pools":[{{wideip_pool_string.stdout}}]}'
          collection_path='mgmt/tm/gtm/wideip'
          resource_key="name"


