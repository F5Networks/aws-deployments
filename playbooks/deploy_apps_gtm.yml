---
# Add CFT output variables to host from persisted results from previous playbooks
- hosts: gtms
  gather_facts: no
  vars_files:
   - [ "~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}.yml" ]
  tasks:
    - name: Add CFT output variables to host from persisted results from previous playbooks
      set_fact:
        ansible_ssh_host={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePublicIp }}
        ManagementInterfacePublicIp={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePublicIp }}
        ManagementInterfacePrivateIp={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePrivateIp }}
        ExternalInterfacePublicIp={{ hostvars[inventory_hostname].stack_outputs.ExternalInterfacePublicIp }}
        ExternalInterfacePrivateIp={{ hostvars[inventory_hostname].stack_outputs.ExternalInterfacePrivateIp }}
        VipAddress={{ hostvars[inventory_hostname].stack_outputs.Vip1 }}
        DeviceName='ip-{{hostvars[inventory_hostname].stack_outputs.ManagementInterfacePrivateIp|replace(".","-")}}.{{region}}.ec2.internal'
        region="{{region}}"

- hosts: bigip-clusters
  gather_facts: no
  connection: local
  tasks:
    - name: re-create a dynamic group of seed devices using first member of each group
      add_host:
          name: "{{ item.value.0 }}"
          group: bigip-cluster-seeds
          cluster_name: "{{ item.key }}"
          members: "{{ item.value }}"
      with_dict: groups
      when: item.key in groups['bigip-clusters']

- hosts: bigip-cluster-seeds
  gather_facts: no
  vars_files:
   - [ "~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}.yml" ]
  tasks:
    - name: Add CFT output variables to host from persisted results from previous playbooks
      set_fact:
        ansible_ssh_host={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePublicIp }}
        ManagementInterfacePublicIp={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePublicIp }}
        ManagementInterfacePrivateIp={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePrivateIp }}
        ExternalInterfacePublicIp={{ hostvars[inventory_hostname].stack_outputs.ExternalInterfacePublicIp }}
        ExternalInterfacePrivateIp={{ hostvars[inventory_hostname].stack_outputs.ExternalInterfacePrivateIp }}
        InternalInterfacePrivateIp={{ hostvars[inventory_hostname].stack_outputs.InternalInterfacePrivateIp }}
        AvailabilityZone={{ hostvars[inventory_hostname].stack_outputs.AvailabilityZone }}
        DeviceName='ip-{{hostvars[inventory_hostname].stack_outputs.ManagementInterfacePrivateIp|replace(".","-")}}.{{region}}.ec2.internal'

- hosts: bigip-cluster-seeds
  gather_facts: no
  vars_files:
   - [ "~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}-vip-Vip1.yml" ]
  tasks:
    - name: Gather EIPs for VIP1
      set_fact:
        VipPrivateIp={{ hostvars[inventory_hostname].stack_outputs.privateIpAddress }} 
        VipEip={{ hostvars[inventory_hostname].stack_outputs.eipAddress }}

- hosts: gtms
  gather_facts: no
  vars:
    vip_id: "Vip1"
  roles:
    - gtm_app1

# NOTE: To conserve EIPs for demos, we're not adding an EIP for VIP2 anymore.
# Simply grab local VIP from original BIGIP CFT output vs. EIP CFT output
- hosts: bigip-cluster-seeds
  gather_facts: no
  vars_files:
   - [ "~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}.yml" ]
  tasks:
    - name: Gather EIPs for VIP2
      set_fact:
        VipPrivateIp={{ hostvars[inventory_hostname].stack_outputs.Vip2 }} 

- hosts: gtms
  gather_facts: no
  vars:
    vip_id: "Vip2"
  roles:
    - gtm_app2

##### Done with application deployment, retrieve some information from the device #######
####################################################################################

- hosts: gtms
  gather_facts: no
  vars_files:
  - [ "~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}.yml" ]
  tasks:
  - name: Add CFT output variables to host from persisted results from previous playbooks
    set_fact: ansible_ssh_host={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePublicIp }}
  - name: Get wideip information
    delegate_to: localhost
    bigip_config:
       state=inspect
       host={{ ansible_ssh_host }}
       user={{ bigip_rest_user }}
       password={{ bigip_rest_password }}
       collection_path='mgmt/tm/gtm/wideip'
    register: result

  - name: Persist gtm listener data
    delegate_to: localhost
    copy:
      content: "{{ result['out'] | to_json }}"
      dest: "~/vars/f5aws/env/{{ env_name }}/facts_{{ inventory_hostname }}.json"
