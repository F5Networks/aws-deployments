---
# Dynamically populate bigip and apphost groups from persisted results from previous playbooks. 
- hosts: localhost
  vars:
    vip_id: "Vip1"
  gather_facts: no
  tasks:
    - shell: "cat ~/vars/f5aws/env/{{ env_name }}/{{ item }}.json"
      register: output
      with_items: groups['bigip-managers']

    - add_host: group=bigips 
        name="{{ item.stdout | from_json | attr('get')('ManagementInterfacePublicIp') }}"
        ManagementInterfacePrivateIp="{{ item.stdout | from_json | attr('get')('ManagementInterfacePrivateIp') }}"
        ManagementInterfacePublicIp="{{ item.stdout | from_json | attr('get')('ManagementInterfacePublicIp') }}"
        ExternalInterfacePublicIp="{{ item.stdout | from_json | attr('get')('ExternalInterfacePublicIp') }}"
        ExternalInterfacePrivateIp="{{ item.stdout | from_json | attr('get')('ExternalInterfacePrivateIp') }}"
        InternalInterfacePrivateIp="{{ item.stdout | from_json | attr('get')('InternalInterfacePrivateIp') }}"
        VipAddress="{{ item.stdout | from_json | attr('get')('Vip1') }}"  
        ansible_ssh_user="admin" 

      with_items: output['results']

    # Re-Creating docker host temp group from data persisted to disk
    - shell: "cat ~/vars/f5aws/env/{{ env_name }}/{{ item }}.json"
      register: output
      with_items: groups['apphost-managers']

    - add_host: group=apphosts 
        name="{{ item.stdout | from_json | attr('get')('WebServerInstancePublicIp') }}" 
        WebServerInstancePublicIp="{{ item.stdout | from_json | attr('get')('WebServerInstancePublicIp') }}"
        WebServerInstancePrivateIp="{{ item.stdout | from_json | attr('get')('WebServerInstancePrivateIp') }}"
        ansible_ssh_user="ec2-user"

      with_items: output['results']

# Loading docker provisioning data
- hosts: apphosts
  gather_facts: no
  vars_files:
    - "~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}_docker_containers.yml"
  tasks:
    - debug: var=apphosts

# Now that topology and variables are finally loaded again
# Deploy App Stuff Here....

- hosts: apphosts
  gather_facts: no
  vars:
    vip_id: "Vip1"
  tasks:
    - name: Store pool members from containers into json
      local_action: template src=../roles/bigip_app/templates/bigip_pool_members_from_containers_test.cfg.j2 dest=~/vars/f5aws/env/{{ env_name }}/{{vip_id}}_pool_from_containers.json

     # Notes:
     # strip out last comma from jinja template output (see note below)
     # json.loads is more sensitive than our parser and need to strip out last "," at the end of the pool member list
     # no clean way to use loop.last directive in jinja template because it's a nested loop over all docker hosts
     # Could try a inline replacement
     # json_payload: "{{json_output|regex_replace(',]}', ']}' ) }}"
     # easier for now to modify in place with ansible replace command than jinja regex filter

    - replace: dest=~/vars/f5aws/env/{{ env_name }}/{{vip_id}}_pool_from_containers.json regexp=',]}' replace=']}'
      delegate_to: localhost

# Adding application configuration to bigip
- hosts: bigips
  gather_facts: no
  vars:
    vip_id: "Vip1"
  tasks:
    - name: Adding/updating a webserver Pool
      delegate_to: localhost
      bigip_config:
          state=present
          host="{{ inventory_hostname }}"
          user="{{ bigip_rest_user }}"
          password="{{ bigip_rest_password }}"
          collection_path='mgmt/tm/ltm/pool'
          resource_key="name"
          payload='{{lookup('file', '~/vars/f5aws/env/' + env_name + '/' + vip_id + '_pool_from_containers.json')}}'

    - name: Configuring High Speed Logging pool to send to analytics Server
      delegate_to: localhost
      bigip_config:
          state=present
          host="{{ inventory_hostname }}"
          user="{{ bigip_rest_user }}"
          password="{{ bigip_rest_password }}"
          collection_path='mgmt/tm/ltm/pool'
          resource_key="name"
          payload='{"name":"syslog_pool","members":[{"name":"10.0.3.32:514","address":"10.0.3.32"},{"name":"10.0.3.33:514","address":"10.0.3.33"}],"monitor":"tcp"}'

    - name: Adding/updating http virtual server
      delegate_to: localhost
      bigip_config:
          state=present
          host="{{ inventory_hostname }}"
          user="{{ bigip_rest_user }}"
          password="{{ bigip_rest_password }}"
          payload='{"name":"{{vip_id}}","destination":"/Common/{{VipAddress}}:80","mask":"255.255.255.255","ipProtocol":"tcp","pool":"/Common/{{vip_id}}_pool","translateAddress":"enabled","translatePort":"enabled","sourceAddressTranslation":{"type":"automap"},"profiles":[{"name":"http"},{"name":"tcp-wan-optimized","context":"clientside"},{"name":"tcp-lan-optimized","context":"serverside"}]}'
          collection_path='mgmt/tm/ltm/virtual'
          resource_key="name"

    - name: Adding/updating https virtual server
      delegate_to: localhost
      bigip_config:
          state=present
          host="{{ inventory_hostname }}"
          user="{{ bigip_rest_user }}"
          password="{{ bigip_rest_password }}"
          collection_path='mgmt/tm/ltm/virtual'
          resource_key="name"
          payload='{"name":"{{vip_id}}_SSL_Offload","destination":"/Common/{{VipAddress}}:443","mask":"255.255.255.255","ipProtocol":"tcp","pool":"/Common/{{vip_id}}_pool","translateAddress":"enabled","translatePort":"enabled","sourceAddressTranslation":{"type":"automap"}, "profiles":[{"name":"http"},{"name":"tcp-ssl-wan-optimized","context":"clientside"},{"name":"tcp-ssl-lan-optimized","context":"serverside"},{"name":"clientssl","context":"clientside"}]}'

# Attach an EIP to the Vip / Application
- hosts: bigip-managers
  gather_facts: no
  vars:
    vip_id: "Vip1"
  #Grab Interface IDs and Secondary IPs from each BIGIP
  vars_files:
     - "~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}.yml"
  tasks:
    - name: deploy eips
      include: "{{ install_path }}/roles/infra/tasks/deploy_eip.yml"


