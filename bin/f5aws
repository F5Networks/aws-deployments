#!/usr/bin/env python

"""

Chris Mutzel <c.mutzel@f5.com>
Alex Applebaum <a.applebaum@f5.com>

For more information on usage see README.md

"""

import os
import sys
import ansible.utils
import ansible.errors
from ansible.callbacks import display

local_module_path = os.path.abspath(
  os.path.join(os.path.dirname(__file__), '..', 'src')
)
sys.path = [local_module_path] + sys.path

import f5_aws.cli as f5_aws_cli
from f5_aws.exceptions import ValidationError, ExecutionError, LifecycleError

if __name__ == "__main__":
  display(" ", log_only=True)
  display(" ".join(sys.argv), log_only=True)
  display(" ", log_only=True)

  try:
    cli = f5_aws_cli.CLI()
    handlers = {
      'init': cli.init,
      'list': cli.list,
      'deploy': cli.deploy,
      'login': cli.login,
      'resources': cli.resources,
      'inventory': cli.inventory,
      'start_traffic': cli.start_traffic,
      'stop_traffic': cli.stop_traffic,
      'remove': cli.remove,
      'teardown': cli.teardown,
    }

    parser = f5_aws_cli.get_parser()
    args = parser.parse_args()

    # leverage ansible debugging and logging
    for i in range(args.verbose):
      print 'Incrementing debug to level %s' % i
      ansible.utils.increment_debug(False, False, False, False)

    handlers[args.cmd](args)

  except ValidationError, e:
    display("INPUT ERROR: %s" % e, color='red', stderr=True)
  except ExecutionError, e:
    display("RUNTIME ERROR: %s" % e, color='red', stderr=True)
  except LifecycleError, e:
    display("LIFECYCLE ERROR: %s" % e, color='red', stderr=True)
  except ansible.errors.AnsibleError, e:
    display("ANSIBLE ERROR: %s" % e, color='red', stderr=True)
    sys.exit(1)
  except KeyboardInterrupt, e:
    display("ERROR: interrupted", color='red', stderr=True)
    sys.exit(1)
  except Exception, e:
    display("ERROR: %s" % e, color='red', stderr=True)
    sys.exit(1)


